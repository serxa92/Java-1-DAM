üß® Tema 6 ‚Äì Excepciones en Java


üìö ¬øQu√© es una excepci√≥n?

Una excepci√≥n es un error en tiempo de ejecuci√≥n que interrumpe el programa.
Java tiene un sistema muy potente para capturar esos errores y actuar sin que el programa se caiga.

üéØ ¬øPor qu√© usar excepciones?

- Evitas que el programa se rompa al leer un archivo, dividir por cero, etc.
- Puedes dar mensajes de error personalizados
 -El c√≥digo es m√°s robusto y profesional

üß© Estructura b√°sica

try {
    // C√≥digo que puede fallar
} catch (TipoDeExcepcion e) {
    // Qu√© hacer si ocurre ese error
}
üîç Ejemplo: divisi√≥n por cero

public class Main {
    public static void main(String[] args) {
        try {
            int resultado = 10 / 0;
            System.out.println("Resultado: " + resultado);
        } catch (ArithmeticException e) {
            System.out.println("¬°Error! No se puede dividir por cero.");
        }
    }
}

üß± Tipos comunes de excepciones

---------------------------------------------------------------------------------
| Tipo	                           |           Cu√°ndo ocurre                     |
---------------------------------------------------------------------------------
| ArithmeticException	           |         Divisi√≥n por cero                   |
---------------------------------------------------------------------------------
| NullPointerException	           |       Acceder a un objeto nulo              |
---------------------------------------------------------------------------------
| ArrayIndexOutOfBoundsException   |       √çndice fuera de rango                 |
---------------------------------------------------------------------------------
| NumberFormatException	           |    Convertir texto a n√∫mero mal escrito     |
---------------------------------------------------------------------------------
| IOException	                   |      Problemas al leer/escribir archivos    |
---------------------------------------------------------------------------------

üß® Crear tus propias excepciones


throw new IllegalArgumentException("Edad no v√°lida");

Y puedes lanzar una excepci√≥n desde un m√©todo:

public void setEdad(int edad) throws Exception {
    if (edad < 0) {
        throw new Exception("Edad negativa no permitida");
    }
}

üß™ Ejercicio 7 ‚Äì Validaci√≥n de divisi√≥n y conversi√≥n con excepciones

üéØ Objetivo:

- Usar try-catch para capturar errores comunes
- Lanzar errores personalizados con throw
- Reforzar el control de flujo seguro

üìã Enunciado:
Crea una clase llamada Calculadora con:
- M√©todo dividir(int a, int b) que devuelva a / b
- Dentro del m√©todo, usa try-catch para evitar divisi√≥n por cero y mostrar un mensaje
- Crea otro m√©todo en la misma clase:
- convertirAEntero(String texto) que intente convertir un String a int
- Si el texto no es un n√∫mero v√°lido, lanza una excepci√≥n NumberFormatException y
  captura el error con un mensaje claro

 En Main, prueba lo siguiente:

- Dividir 10 entre 0
- Convertir el texto "abc" a n√∫mero
- Convertir correctamente "123" y dividirlo entre 3

üéÅ BONUS - - Excepci√≥n personalizada: EdadInvalidaException

üß© Crea una clase Persona con:

- Atributo edad (int)
- M√©todo setEdad(int edad) que:
- Si la edad es menor que 0, lance una excepci√≥n personalizada llamada EdadInvalidaException
-  es v√°lida, la asigna
- Crea la clase EdadInvalidaException que herede de Exception
- En Main, intenta crear una Persona con edad -5 y captura el error mostrando un mensaje claro.